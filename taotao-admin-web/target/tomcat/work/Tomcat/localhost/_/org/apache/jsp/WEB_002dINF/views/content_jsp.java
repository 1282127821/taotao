/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2018-03-15 10:12:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class content_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("\t/** 定义工具栏 */\r\n");
      out.write("\tvar contentToolbar = [{ \r\n");
      out.write("\t    text : '新增', // 文本\r\n");
      out.write("\t    iconCls : 'icon-add', // 图标\r\n");
      out.write("\t    handler : function(){ // 监听事件\r\n");
      out.write("\t    \t/** 获取用户选中的树节点 */\r\n");
      out.write("\t    \tvar tree_node = $(\"#content\").find(\"#content_category_tree\").tree(\"getSelected\");\r\n");
      out.write("\t    \t/** 判断是否有选中的树节点，判断树节点是不是叶节点 */\r\n");
      out.write("\t    \tif(!tree_node || !$(\"#content\").find(\"#content_category_tree\").tree(\"isLeaf\",tree_node.target)){\r\n");
      out.write("\t    \t\t$.messager.alert('提示','新增内容必须选择一个内容分类!', \"info\");\r\n");
      out.write("\t    \t\treturn;\r\n");
      out.write("\t    \t}\r\n");
      out.write("\t    \t/** 调用创建窗口函数 */\r\n");
      out.write("\t    \tTT.createWindow({\r\n");
      out.write("\t\t\t\turl : \"/page/content-add\" // 传进请求URL\r\n");
      out.write("\t\t\t}); \r\n");
      out.write("\t    }\r\n");
      out.write("\t},{\r\n");
      out.write("\t    text : '编辑', // 文本\r\n");
      out.write("\t    iconCls : 'icon-edit', // 图标\r\n");
      out.write("\t    handler : function(){ // 监听事件\r\n");
      out.write("\t    \tvar ids = TT.getSelectionsIds(\"#content #contentList\");\r\n");
      out.write("\t    \tif(ids.length == 0){\r\n");
      out.write("\t    \t\t$.messager.alert('提示','必须选择一个内容才能编辑!', \"info\");\r\n");
      out.write("\t    \t\treturn;\r\n");
      out.write("\t    \t}\r\n");
      out.write("\t    \tif(ids.indexOf(',') > 0){\r\n");
      out.write("\t    \t\t$.messager.alert('提示','只能选择一个内容!', \"info\");\r\n");
      out.write("\t    \t\treturn;\r\n");
      out.write("\t    \t}\r\n");
      out.write("\t    \t/** 弹出修改窗口 */\r\n");
      out.write("\t    \tTT.createWindow({\r\n");
      out.write("\t\t\t\turl : \"/page/content-edit\", // 请求地址\r\n");
      out.write("\t\t\t\tonLoad : function(){ // 窗口加载成功后，为修改页面填充数据\r\n");
      out.write("\t\t\t\t\tvar data = $(\"#content #contentList\").datagrid(\"getSelections\")[0];\r\n");
      out.write("\t\t\t\t\t/** 为表单填充数据 */\r\n");
      out.write("\t\t\t\t\t$(\"#contentEditForm\").form(\"load\",data);\r\n");
      out.write("\t\t\t\t\t/** 实现图片显示 */\r\n");
      out.write("\t\t\t\t\tif(data.pic){\r\n");
      out.write("\t\t\t\t\t\t$(\"#contentEditForm [name=pic]\").after(\"<a href='\"+ data.pic +\"' target='_blank'><img src='\"+data.pic+\"' width='80' height='50'/></a>\");\t\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t/** 实现图片显示 */\r\n");
      out.write("\t\t\t\t\tif(data.pic2){\r\n");
      out.write("\t\t\t\t\t\t$(\"#contentEditForm [name=pic2]\").after(\"<a href='\"+ data.pic2 +\"' target='_blank'><img src='\"+data.pic2+\"' width='80' height='50'/></a>\");\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t/** 为富文本编辑器添加内容 */\r\n");
      out.write("\t\t\t\t\tcontentEditEditor.html(data.content);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});    \t\r\n");
      out.write("\t    }\r\n");
      out.write("\t},{\r\n");
      out.write("\t    text : '删除', // 删除\r\n");
      out.write("\t    iconCls : 'icon-cancel',\r\n");
      out.write("\t    handler : function(){\r\n");
      out.write("\t    \tvar ids = TT.getSelectionsIds(\"#content #contentList\");\r\n");
      out.write("\t    \tif(ids.length == 0){\r\n");
      out.write("\t    \t\t$.messager.alert('提示','未选中商品!', 'info');\r\n");
      out.write("\t    \t\treturn;\r\n");
      out.write("\t    \t}\r\n");
      out.write("\t    \t/** 确认窗口 */\r\n");
      out.write("\t    \t$.messager.confirm('确认','确定删除ID为 '+ ids +' 的内容吗？', function(r){\r\n");
      out.write("\t    \t    if (r){\r\n");
      out.write("\t    \t    \tvar params = {\"ids\" : ids};\r\n");
      out.write("\t            \t$.post(\"/content/delete\", params, function(data, status){\r\n");
      out.write("\t        \t\t\tif(status == \"success\"){\r\n");
      out.write("\t        \t\t\t\t$.messager.alert('提示','删除内容成功!', \"info\", function(){\r\n");
      out.write("\t        \t\t\t\t\t$(\"#contentList\").datagrid(\"reload\");\r\n");
      out.write("\t        \t\t\t\t});\r\n");
      out.write("\t        \t\t\t}\r\n");
      out.write("\t        \t\t});\r\n");
      out.write("\t    \t    }\r\n");
      out.write("\t    \t});\r\n");
      out.write("\t    }\r\n");
      out.write("\t}];\r\n");
      out.write("\t\r\n");
      out.write("\t$(function(){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t/** 获取该页面对应的div容器 */\r\n");
      out.write("\t\tvar contentDiv = $(\"#content\"); \r\n");
      out.write("\t\t/** 获取树容器对象 */\r\n");
      out.write("\t\tvar treeObj = contentDiv.find(\"#content_category_tree\");\r\n");
      out.write("\t\t/** 获取内容数据表格对象 */\r\n");
      out.write("\t\tvar datagrid = contentDiv.find(\"#contentList\");\r\n");
      out.write("\t\t/** 为树节点绑定点击事件 */\r\n");
      out.write("\t\ttreeObj.tree({\r\n");
      out.write("\t\t\tonClick : function(node){ //点击事件\r\n");
      out.write("\t\t\t\t/** 判断树节点是不是叶节点 */\r\n");
      out.write("\t\t\t\tif(treeObj.tree(\"isLeaf\",node.target)){\r\n");
      out.write("\t\t\t\t\t/** 发请求重新加载内容 */\r\n");
      out.write("\t\t\t\t\tdatagrid.datagrid('reload', {\r\n");
      out.write("\t\t\t\t\t\tcategoryId : node.id // 请求参数\r\n");
      out.write("\t\t\t        });\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<!-- 定义easyui-panel面板 -->\r\n");
      out.write("<div class=\"easyui-panel\" id=\"content\" data-options=\"width:'100%',height:'100%',\r\n");
      out.write("\t\t\t\t\tnoheader:true,border:false\"\tstyle=\"padding:5px;\">\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t<!-- 使用easyui-layout布局 -->\r\n");
      out.write("    <div class=\"easyui-layout\" data-options=\"fit:true\">\r\n");
      out.write("    \t\r\n");
      out.write("    \t<!-- 定义西部区域 -->\r\n");
      out.write("        <div data-options=\"region:'west',split:false\" style=\"width:200px;padding:5px\">\r\n");
      out.write("            <ul id=\"content_category_tree\" class=\"easyui-tree\" \r\n");
      out.write("            \t\tdata-options=\"url:'/contentcategory',animate: true,method : 'get'\"></ul>\r\n");
      out.write("        </div>\r\n");
      out.write("        \r\n");
      out.write("        <!-- 定义中间区域 -->\r\n");
      out.write("        <div data-options=\"region:'center'\" style=\"padding:5px\">\r\n");
      out.write("\t            <table class=\"easyui-datagrid\" id=\"contentList\" \r\n");
      out.write("\t            \tdata-options=\"toolbar:contentToolbar,singleSelect:false,\r\n");
      out.write("\t            \t\t\t\t  collapsible:true,pagination:true,method:'get',\r\n");
      out.write("\t            \t\t\t\t  pageSize:20,fit:true,url:'/content',\r\n");
      out.write("\t            \t\t\t\t  fitColumns:true,\r\n");
      out.write("\t            \t\t\t\t  queryParams:{categoryId:0}\">\r\n");
      out.write("\t\t\t\t    <thead>\r\n");
      out.write("\t\t\t\t        <tr>\r\n");
      out.write("\t\t\t\t            <th data-options=\"field:'id',width:30\">ID</th>\r\n");
      out.write("\t\t\t\t            <th data-options=\"field:'title',width:120,formatter:TAOTAO.formatText\">内容标题</th>\r\n");
      out.write("\t\t\t\t            <th data-options=\"field:'subTitle',width:100,formatter:TAOTAO.formatText\">内容子标题</th>\r\n");
      out.write("\t\t\t\t            <th data-options=\"field:'titleDesc',width:120,formatter:TAOTAO.formatText\">内容描述</th>\r\n");
      out.write("\t\t\t\t            <th data-options=\"field:'url',width:60,align:'center',formatter:TAOTAO.formatUrl\">内容连接</th>\r\n");
      out.write("\t\t\t\t            <th data-options=\"field:'pic',width:50,align:'center',formatter:TAOTAO.formatUrl\">图片</th>\r\n");
      out.write("\t\t\t\t            <th data-options=\"field:'pic2',width:50,align:'center',formatter:TAOTAO.formatUrl\">图片2</th>\r\n");
      out.write("\t\t\t\t            <th data-options=\"field:'created',width:130,align:'center',formatter:TAOTAO.formatDateTime\">创建日期</th>\r\n");
      out.write("\t\t\t\t            <th data-options=\"field:'updated',width:130,align:'center',formatter:TAOTAO.formatDateTime\">更新日期</th>\r\n");
      out.write("\t\t\t\t        </tr>\r\n");
      out.write("\t\t\t\t    </thead>\r\n");
      out.write("\t\t\t</table>\r\n");
      out.write("        </div>\r\n");
      out.write("        \r\n");
      out.write("    </div>\r\n");
      out.write("</div>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
